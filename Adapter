Призначення
Адаптує інтерфейс одного класу в інший, очікуваний клієнтом. Адаптер забезпечує роботу класів з несумісними інтерфейсами, та найчастіше застосовується тоді, коли система підтримує необхідні дані і поведінку, але має невідповідний інтерфейс.

Застосування
Адаптер передбачає створення класу-оболонки з необхідним інтерфейсом.

Клас Adapter приводить інтерфейс класу Adaptee у відповідність з інтерфейсом класу Target (спадкоємцем якого є Adapter). Це дозволяє об'єктові Client використовувати об'єкт Adaptee так, немов він є екземпляром класу Target.

Наслідки
Шаблон Адаптер дозволяє включати вже наявні об'єкти в нові об'єктні структури, незалежно від відмінностей в їхніх інтерфейсах.

Переваги та недоліки
Переваги
Допомагає досягти багаторазового використання та гнучкості.
Клас клієнта не ускладнюється необхідністю використовувати інший інтерфейс і може використовувати поліморфізм для обміну між різними реалізаціями адаптерів.
Недоліки
Всі запити пересилаються, тому спостерігається незначне збільшення накладних витрат.
Іноді багато адаптацій потрібні по ланцюгу адаптера, щоб досягти потрібного типу.

#include <iostream>

using namespace std;

// Target Ціль
struct CShape
{
	virtual ~CShape() {};
	virtual void Draw() { cout << "Rectangle" << endl; };
};
// Adaptee Будемо адаптувати
struct CTextViewer
{
	CTextViewer() {};
	virtual ~CTextViewer() {};
	void DrawText() { cout << "Text" << endl; };
};
// Adapter
// Адаптер класу
struct CTextShape : public CShape, protected CTextViewer
{
	CTextShape() {};
	virtual ~CTextShape() {};
	virtual void Draw()
	{
		DrawText(); // Виклик метода класу, що адаптуємо
	};
};
// Адаптер об’єкта
struct CTextShapeOBJ // : public CShape
{
	CTextViewer shape;
	virtual void Draw()
	{
		shape.DrawText(); // Виклик метода класу, що адаптуємо
	};
};
// Client
void DrawObject(CShape* p)
{
	p->Draw();
}
void main()
{
	// Створюємо адаптер і малюємо об'єкт
	CShape* obj = new CTextShape();
	DrawObject(obj);
	delete obj;
	CTextShapeOBJ adapt;
	CTextViewer obj2;
	adapt.shape = obj2;
	adapt.Draw();
}
